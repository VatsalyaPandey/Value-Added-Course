# READ THR HTML PART OF THE URL
my_html<-raed_html(ur1)
# READ THR HTML PART OF THE URL
my_html<-read_html(url)
# READ THR HTML PART OF THE URL
my_html<-read_html(url)
install.packages(c("robotstxt", "rvest"))
library(robotstxt)
library(rvest)
path= paths_allowed("https://www.imdb.com/list/ls062161771/")
library(robotstxt)
library(rvest)
path= paths_allowed("https://www.imdb.com/list/ls062161771/")
url<-"https://www.imdb.com/list/ls062161771/"
html<-read_html(url)
my_table<-html_nodes(html,"table")
movie_table<-html_table(my_tables)
movie_table<-html_table(my_table)
library(robotstxt)
library(rvest)
path= paths_allowed("https://www.imdb.com/list/ls062161771/")
url<-"https://www.imdb.com/list/ls062161771/"
html<-read_html(url)
my_table<-html_nodes(html,"table")
movie_table<-html_table(my_table)
view(my_table)
View(my_table)
library(robotstxt)
library(rvest)
path= paths_allowed("https://www.imdb.com/list/ls062161771/")
url<-"https://www.imdb.com/list/ls062161771/"
html<-read_html(url)
my_table<-html_nodes(html,"table")
movie_table<-html_table(my_table)
View(my_table)
str(movie_table)
write.csv(movie_table,"movies.csv")
library(robotstxt)
library(rvest)
path= paths_allowed("https://www.imdb.com/list/ls062161771/")
url<-"https://www.imdb.com/list/ls062161771/"
html<-read_html(url)
my_table<-html_nodes(html,"table")
movie_table<-html_table(my_table)[[1]]
library(robotstxt)
library(rvest)
path= paths_allowed("https://www.imdb.com/list/ls062161771/")
url<-"https://www.imdb.com/chart/top/"
html<-read_html(url)
my_table<-html_nodes(html,"table")
movie_table<-html_table(my_table)[[1]]
View(my_table)
str(movie_table)
write.csv(movie_table,"movies.csv")
library(robotstxt)
library(rvest)
path= paths_allowed("https://www.imdb.com/list/ls062161771/")
url<-"https://www.imdb.com/chart/top/"
html<-read_html(url)
my_table<-html_nodes(html,"table")
movie_table<-html_table(my_table)[[1]]
View(my_table)
library(robotstxt)
library(rvest)
path= paths_allowed("https://www.imdb.com/chart/top/")
url<-"https://www.imdb.com/chart/top/"
html<-read_html(url)
my_table<-html_nodes(html,"table")
movie_table<-html_table(my_table)[[1]]
View(my_table)
library(robotstxt)
library(rvest)
path= paths_allowed("https://www.imdb.com/chart/top/")
url<-"https://www.imdb.com/chart/top/"
my_html<-read_html(url)
my_table<-html_nodes(my_html,"table")
movie_table<-html_table(my_table)[[1]]
View(my_table)
# Impoting Data
imdb = read.csv("my_movie.csv")
library(robotstxt)
library(rvest)
path= paths_allowed("https://www.imdb.com/chart/top/")
url<-"https://www.imdb.com/chart/top/"
my_html<-read_html(url)
my_table<-html_nodes(my_html,"table")
movie_table<-html_table(my_table)[[1]]
View(my_table)
setwd("~/")
library(readr)
titanic_4_ <- read_csv("titanic (4).csv")
View(titanic_4_)
# Data Split
split= sample.split(dataset$Species,SplitRatio = 0.75)
# Importing dataset
dataset = iris
View((testing_set))
View(testing_set)
testing_set=subset(dataset,split==FALSE)
View(training_set)
View(testing_set)
testing_set=subset(dataset,split==FALSE)
# Data Split
split = sample.split(dataset$Species,SplitRatio = 0.75)
# Training & Test set
training_set=subset(dataset, split==TRUE)
# Importing dataset
dataset = iris
# Importing libraries
library(caTools)
install.packages(c("caTools", "ggplot2", "GGally", "e1071"))
# Importing libraries
library(caTools)
library(ggplot2)
library(GGally)
library(e1071)
# Data Split
split = sample.split(dataset$Species,SplitRatio = 0.75)
# Training & Test set
training_set=subset(dataset, split==TRUE)
testing_set=subset(dataset, split==FALSE)
View(training_set)
View(testing_set)
# Dataset Plot
ggpairs(training_set,
ggplot2::aes(colour = Species, alpha = 0.4))
# Training & Test set
training_set=subset(dataset, split==TRUE)
testing_set=subset(dataset, split==FALSE)
View(training_set)
testing_set[,1:4] = scale(testing_set[,1:4])
# Scaling Data
training_set[,1:4] = scale(training_set[,1:4])
testing_set[,1:4] = scale(testing_set[,1:4])
View(training_set)
View(testing_set)
# Scaling Data
training_set[,1:4] = scale(training_set[,1:4])
testing_set[,1:4] = scale(testing_set[,1:4])
View(training_set)
View(testing_set)
# SVC
classifier1 = svm(formula = Species~.,
data = training_set,
type = 'C-classification',
kernel = 'radial')
testing_set[,1:4] = scale(testing_set[,1:4])
# SVC
classifier1 = svm(formula = Species~.,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Prediction
pred1 = predict(classifier1, type ='response',
newdata = testing_set)
comp = data.frame(testing_set$Species, pred1)
# Confusion Matrix
cm1 = table(testing_set[,5], pred1)
# Importing Dataset
dataset = read.csv("Admission_Predict.csv")
View(dataset)
View(dataset)
View(classifier1)
View(testing_set)
View(training_set)
setwd("~/mlr")
# Importing Dataset
dataset = read.csv("Admission_Predict.csv")
# Slicing data
data = dataset[,2:9]
# Importing Data Splitting library
library(caTools)
# Data Splitting
split = sample.split(data$Chance.of.Admit, SplitRatio = 0.8)
# Training data
training_set = subset(data, split==TRUE)
View(training_set)
lines(y_pred, type = 'o', col = 'red')
# Visualization
plot(testing_set$Chance.of.Admit, type = 'o', col = 'blue',
xlab = 'Test Data', ylab = 'COA')
# Visualization
plot(testing_set$Chance.of.Admit, type = 'o', col = 'blue',
xlab = 'Test Data', ylab = 'COA')
View(training_set)
# Testing Data
testing_set = subset(data, split==FALSE)
View(testing_set)
# Applying Regression
regressor = lm(formula = Chance.of.Admit~., data = training_set)
# Prediction
y_pred = predict(regressor, newdata = testing_set)
View(y_pred)
# Visualization
plot(testing_set$Chance.of.Admit, type = 'o', col = 'blue',
xlab = 'Test Data', ylab = 'COA')
lines(y_pred, type = 'o', col = 'red')
# Slicing data
data = dataset[,2:9]
